//ORDENAR ENQUANTO DIGITA
#include <stdio.h>

int main()
{
    int n, total=0,num;
    scanf("%d",&n);
    int v[n];
    
    while(total<n){
        scanf("%d",&num);
        
        //se total de elementos for zero adiciona na posicao zero
        if(total==0){
            v[0]=num;
            total++;
        }
        
        //se total for 1, entao verifica se a posicao zero e maior que o numero digitado e troca de posicao se for
        else if(total == 1){
            if(v[0] <= num){
                v[1]=num;
            }
            else{
                v[1]=v[0];
                v[0]=num;
            }
            total++;
        }
        
        //se tiver 2 ou mais elementos cai no else
        else{
            int c=0;
            
            //while para achar a posicao certa para inserir
            while(v[c]<num && c<total){
                c++;
            }
            
            //se a posicao encontrada for igual a total ou seja c=4 e total=4
            if(c==total){
                v[c]=num;
            }
            //acomoda os elementos uma posicao pra frente pra abrir espaco pra adicionar o numero na posicao c
            else{
                for(int i=total;i>=c;i--){
                    v[i+1]=v[i];
                }
                v[c]=num;
            }
            total++;
        }
    }
    
    for(int i=0;i<n;i++){
        printf("%d\t",v[i]);
    }
    
    return 0;
}









Ler 5 elementos de um vetor e apresentá-los ao usuário.

#include <stdio.h>

int main(){
    int vet[5], i=0;
    
    for(;i<5;i++){
        scanf("%d",&vet[i]);
    }
    
    i=0;
    
    for(;i<5;i++){
        printf("\nvet[%d]=%d\n",i,vet[i]);
    }
    
    return 0;
}









Desenvolver um algoritmo que leia 5 elementos de um vetor A e
no final apresente o total da soma de todos os elementos
ímpares.

#include <stdio.h>

int main(){
    int vet[5], soma=0;
    
    for(int i=0;i<5;i++){
        scanf("%d",&vet[i]);
        
        if(vet[i] % 2 != 0){
            soma+=vet[i];
        }
    }
    
    printf("\nsoma %d",soma);
    return 0;
}








Desenvolver um programa que leia 5 elementos de um vetor A.
Construir um vetor B de mesmo tipo e copiar os valores do vetor
A para o B, mantendo-os nas posições originais.

#include <stdio.h>

int main(){
    int vetA[5], vetB[5], i=0;
    
    for(;i<5;i++){
        scanf("%d",&vetA[i]);
    }
    
    i=0;
    
    printf("vetor A\n");
    
    for(;i<5;i++){
        printf("vetA[%d]=%d\n",i,vetA[i]);
    }
    
    i=0;
    
    printf("\nvetor B\n");
    
    for(;i<5;i++){
        vetB[i]=vetA[i];
        printf("vetB[%d]=%d\n",i,vetB[i]);
    }
    
    return 0;
}








Desenvolver um programa com uma função para ler 15 números, armazená-los em um vetor e mostrar o
total de números ímpares.

#include <stdio.h>

void ler_numeros(){
    int vet[15], cont_impares=0;
    
    for(int i=0;i<15;i++){
        printf("vet[%d]=",i);
        scanf("%d",&vet[i]);
        
        if(vet[i]%2 != 0){
            cont_impares++;
        }
    }
    
    printf("\ntotal de impares: %d",cont_impares);
}

void main(){
    ler_numeros();
}








1. Desenvolver um programa com uma função para ler 15 números, armazená-los em um vetor e mostrar o
total de números digitados maiores que 5.

#include <stdio.h>

int main(){
    int vetor[15], cont=0;
    
    for(int i=0;i<15;i++){
        printf("vet[%d]=",i);
        scanf("%d",&vetor[i]);
        
        if(vetor[i]>5){
            cont++;
        }
    }
    
    printf("total de numeros maiores que 5: %d",cont);
    
    return 0;
}








2. Crie um programa com uma função que leia 5 elementos de um vetor A. Construir um vetor B de mesmo
tipo, observando a seguinte lei de formação: Todo elemento de B deve ser o quadrado do elemento de A
correspondente. Apresentar os 2 vetores.

#include <stdio.h>
#include <math.h>

void ler_numeros(){
    int vetA[5], vetB[5], i=0;
    
    for(;i<5;i++){
        scanf("%d",&vetA[i]);
    }
    
    printf("\nvetor A\n");
    
    i=0;
    
    for(;i<5;i++){
        vetB[i] = pow(vetA[i],2);
        printf("vetA[%d]=%d\n",i,vetA[i]);
    }
    
    i=0;
    
    printf("\nvetor B\n");
    
    for(;i<5;i++){
        printf("vetB[%d]=%d\n",i,vetB[i]);
    }
    
}

int main(){
    ler_numeros();
    return 0;
}








3. Escrever um programa com uma função que leia N números reais, armazene-os em um vetor e imprimaos na ordem inversa.

#include <stdio.h>

void main(){
    int qtd_numeros;
    
    printf("informe a quantidade de elementos: ");
    scanf("%d",&qtd_numeros);
    
    float vet[qtd_numeros];
    
    for(int i=0;i<qtd_numeros;i++){
        scanf("%f",&vet[i]);
    }
    
    printf("vetor de tras pra frente\n");
    
    for(int i=qtd_numeros-1;i>=0;i--){
        printf("vet[%d]=%.2f\n",i,vet[i]);
    }
    
}







4. Desenvolver um algoritmo com uma função que leia dois vetores, sendo a primeiro com 5 elementos e o
segundo com 8 elementos. Construir um terceiro vetor que armazene a junção dos dois primeiros vetores
e mostre os valores na tela. Assim, o terceiro vetor deve ter 13 posições.

#include <stdio.h>

int main(){
    int vetA[5], vetB[8], vetC[13];
    
    for(int i=0;i<5;i++){
        printf("vetA[%d]=",i);
        scanf("%d",&vetA[i]);
    }
    
    printf("\n");
    
    for(int i=0;i<8;i++){
        printf("vetB[%d]=",i);
        scanf("%d",&vetB[i]);
    }
    
    printf("\n");
    
    //juntando vetores
    for(int i=0;i<13;i++){
        if(i<5){
            vetC[i]=vetA[i];
        }
        else{
            vetC[i]=vetB[i-5];
            //se o i for maior ou igual a 5 será 5-5=0, 6-5=1, 7-5=2, 8-5=3, 9-5=4, 10-5=5, 11-5=6, 12-5=7, ou seja, 
            //com a subtração de -5 no indice faz com que seja possível pegar o indice do segundo vetor corretamente.
        }
        printf("vetC[%d]=%d\n",i,vetC[i]);
    }
    
    
    return 0;
}









5. Criar um programa com uma função que leia os N valores de um vetor do tipo inteiro e, então, construir
um segundo vetor de mesma dimensão, sendo que cada elemento do segundo vetor é o somatório do
elemento correspondente no primeiro. Ex.: VetA[0] = 5; logo, VetB[0] = 15 (1 + 2 + 3 + 4 + 5 = 15).


6. Crie um programa com uma função que leia 8 valores dos vetores A e B. O Vetor A deve aceitar apenas a
entrada de valores que sejam divisíveis por 2 e 3, e o vetor B deve aceitar apenas valores múltiplos de 5.
Esta validação não deve ser feita pelo usuário, mas sim pelo programa. Depois, crie um terceiro vetor que
armazene todos os elementos dos dois vetores (16 posições) e apresente esses valores na tela.

#include <stdio.h>

int main(){
    int vetA[8], aux_vetorA, vetB[8], aux_vetorB, vetC[16];
    
    //entrada vetor A
    printf("elementos vetor A\n");
    
    for(int i=0;i<8;i++){
        printf("vetA[%d]=",i);
        scanf("%d",&aux_vetorA);
        
        while(aux_vetorA%2!=0 || aux_vetorA%3!=0){
            printf("\tvalor não é divisível por 2 e 3, digite novamente\n");
            printf("\tvetA[%d]=",i);
            scanf("%d",&aux_vetorA);
        }
        
        vetA[i]=aux_vetorA;
    }
    
    
    //entrada vetor B
    printf("\elementos vetor B\n");
    
    for(int i=0;i<8;i++){
        printf("vetB[%d]=",i);
        scanf("%d",&aux_vetorB);
        
        while(aux_vetorB%5!=0){
            printf("\tvalor não é multiplo de 5, digite novamente\n");
            printf("\tvetB[%d]=",i);
            scanf("%d",&aux_vetorB);
        }
        
        vetB[i]=aux_vetorB;
    }
    
    printf("\n\nvetores A e B juntos em no vetor C\n");
    
    for(int i=0;i<16;i++){
        if(i<=7){
            vetC[i]=vetA[i];
        }
        else{
            vetC[i]=vetB[i-8];
        }
        printf("vetC[%d]=%d\n",i,vetC[i]);
    }
    
    return 0;
}










7. Faça um algoritmo com uma função para criar um vetor de 20 posições. As primeiras 10 posições são
valores informados pelo usuário, as últimas 10 posições deverão ter valores que obedecem a seguinte
regra: os valores de posições ímpares da primeira metade deverão ser acrescidos de 5 % na segunda
metade. E, os valores pares da primeira metade deverão ser acrescidos de 2% na segunda metade. Ex.:
Vet[0] = 10, logo, Vet[10] = 10 + 2%.


8. Construa um algoritmo para ler 2 vetores reais de N posições e enviá-los por parâmetro para uma função.
Depois esta função deve criar um terceiro vetor cujo conteúdo de cada posição é: 1, se o número
armazenado em uma posição do 1º vetor é o mesmo armazenado na posição respectiva do 2º vetor, e 0,
se não for o mesmo.

#include <stdio.h>

int qtd_elementos;

void recebe_vetor(float a[qtd_elementos], float b[qtd_elementos]){
    float c[qtd_elementos];
    
    for(int i=0;i<qtd_elementos;i++){
        if(a[i] == b[i]){
            c[i]=1;
        }
        else{
            c[i]=0;
        }
    }
    
    for(int i=0;i<qtd_elementos;i++){
        printf("vetC[%d]=%.2f\n",i,c[i]);
    }
}

int main(){
    printf("qtd_elementos vetor: ");
    scanf("%d",&qtd_elementos);
    
    float vetA[qtd_elementos], vetB[qtd_elementos];
    
    for(int i=0;i<qtd_elementos;i++){
        printf("vetA[%d]=",i);
        scanf("%f",&vetA[i]);
    }
    
    for(int i=0;i<qtd_elementos;i++){
        printf("vetB[%d]=",i);
        scanf("%f",&vetB[i]);
    }
    
    printf("\n");
    
    recebe_vetor(vetA,vetB);
}








9. Desenvolva um algoritmo com uma função que contenha um vetor de N elementos. O conteúdo das
posições pares deve ser ‘P’ e das posições ímpares deve ser ‘I’. A inserção dos elementos deve ser feita
automaticamente. Depois, apresente o resultado na tela.

#include <stdio.h>

int main(){
    int qtd;
    
    scanf("%d",&qtd);
    
    char vet[qtd];
    
    for(int i=0;i<qtd;i++){
        if(i%2==0){
            vet[i]='P';
        }
        else{
            vet[i]='I';
        }
    }
    
    for(int i=0;i<qtd;i++){
        printf("vet[%d]=%c\n",i,vet[i]);
    }
    
    return 0;
}







10. Faça um algoritmo para ler os valores gastos em cheque por uma pessoa durante um mês, e depois
imprimir: a lista com todos os valores, o maior valor, o menor valor e a média de todos os valores. No
início do algoritmo o usuário deve informar o número de cheques usados e passa-lo por parâmetro para
uma função para realizar os cálculos.

#include <stdio.h>

void calcular(int x){
    int vet[x], maior, menor, soma=0;
    float media;
    for(int i=0;i<x;i++){
        scanf("%d",&vet[i]);
        if(i==0){
            maior=vet[i];
            menor=vet[i];
        }
        if(vet[i]>maior){
            maior=vet[i];
        }
        if(vet[i]<menor){
            menor=vet[i];
        }
        soma+=vet[i];
    }
    media=(float)soma/x;
    for(int i=0;i<x;i++){
        printf("%d\t",vet[i]);
    }
    printf("media %.2f",media);
    printf("maior %d",maior);
    printf("menor %d",menor);
}

int main(){
    int qtd;
    scanf("%d",&qtd);
    calcular(qtd);
    return 0;
}







11. Faça um algoritmo que leia um vetor de N elementos e passe-o por parâmetro para uma função. Esta
função deverá modificar o vetor de modo que o primeiro elemento passe para a última posição,
deslocando todos os outros para uma posição à esquerda. Imprima o vetor modificado.
Exemplo: Antes: 12 35 25 14 1 85 10 110 44 996
 Depois: 35 25 14 1 85 10 110 44 996 12










/////////////////////////////// ORDEM CRESCENTE ENQUANTO DIGITA

#include <stdio.h>

int main() {
    int vet[10],aux;
    for(int i=0;i<10;i++){
        printf("vet[%d]=",i);
        scanf("%d",&vet[i]);
        for(int j=0;j<i;j++){
            // printf("\n j %d\n",vet[j]);
            // printf("\n i %d\n",vet[i]);
            if(vet[i]<vet[j]){
                //printf("\nola %d < %d\n",vet[i],vet[j]);
              aux=vet[i];
              vet[i]=vet[j];
              vet[j]=aux;
              //printf("\n houve uma troca");
            }
            //printf("%d",j);
        }
        //printf("\n");
    }
    printf("\n");
    for(int i=0;i<10;i++){
        printf("vet[%d]=%d\n",i,vet[i]);
    }
    return 0;
}








// Fac¸a um programa que receba 6 numeros inteiros e mostre: ´
// • Os numeros pares digitados; ´
// • A soma dos numeros pares digitados; ´
// • Os numeros ´ ´ımpares digitados;
// • A quantidade de numeros ´ ´ımpares digitados;

#include <stdio.h>
int main() {
    int vet[6],soma_pares=0,cont_impares=0;
    
    for(int i=0;i<6;i++){
        printf("\nvet[%d]=",i);
        scanf("%d",&vet[i]);
        if(vet[i]%2==0){
            soma_pares+=vet[i];
            printf("\n\t %d é par",vet[i]);
        }
        else{
            printf("\n\t %d é impar",vet[i]);
            cont_impares++;
        }
    }
    printf("\nsoma pares: %d",soma_pares);
    printf("\nqtd impares %d",cont_impares);
    return 0;
}







//ler valores e colocar os pares em um vetor e os impares em outro, cuidando para imprimir os elementos validos apenas

#include <stdio.h>

void calcular(int x){
    int vet[x], total_pares=0, total_impar=0;
    for(int i=0;i<x;i++){
        scanf("%d",&vet[i]);
        if(vet[i]%2==0){
            total_pares++;
        }
        else{
            total_impar++;
        }
    }
    int vetImpar[total_impar], vetPar[total_pares], vi=0,vp=0;
    for(int i=0;i<x;i++){
        if(vet[i]%2!=0){
            vetImpar[vi]=vet[i];
            vi++;
        }
        else{
            vetPar[vp]=vet[i];
            vp++;
        }
    }
    for(int i=0;i<total_impar;i++){
        printf("%d\t",vetImpar[i]);
    }
    printf("\n");
    for(int i=0;i<total_pares;i++){
        printf("%d\t",vetPar[i]);
    }
}

int main(){
    int qtd;
    scanf("%d",&qtd);
    calcular(qtd);
    return 0;
}








// Leia dois vetores de inteiros x e y, cada um com 5 elementos (assuma que o usuario nao
// informa elementos repetidos). Calcule e mostre os vetores resultantes em cada caso
// abaixo:
// • Soma entre x e y: soma de cada elemento de x com o elemento da mesma posicao
// em y.
// • Produto entre x e y: multiplicacao de cada elemento de x com o elemento da mesma
// posicao em y.
// • Diferenca entre x e y: todos os elementos de x que nao existam em y.
// • Intersecao entre x e y: apenas os elementos que aparecem nos dois vetores.
// • Uniao entre x e y: todos os elementos de x, e todos os elementos de y que nao
// estao em x

#include <stdio.h>
int main(){
    int x[5], y[5];
    char existe;
    
    for(int i=0;i<5;i++){
        scanf("%d",&x[i]);
    }
    printf("\n");
    for(int i=0;i<5;i++){
        scanf("%d",&y[i]);
    }
    
    printf("\n\nsoma de cada elemento de x com o elemento da mesma posicao em y\n");
    for(int i=0;i<5;i++){
        printf("x[%d]+y[%d]=%d\n",x[i],y[i],x[i]+y[i]);
    }
    
    printf("multiplicacao de cada elemento de x com o elemento da mesma posicao em y\n");
    for(int i=0;i<5;i++){
        printf("x[%d]*y[%d]=%d\n",x[i],y[i],x[i]*y[i]);
    }
    
    printf("todos os elementos de x que nao existam em y\n");
    for(int i=0;i<5;i++){
        existe='n';
        for(int j=0;j<5;j++){
            if(x[i]==y[j]){
                existe='s';
            }
        }

        if(existe=='n'){
            printf("%d\t",x[i]);
        }
    }
    
    printf("\napenas os elementos que aparecem nos dois vetores\n");
    for(int i=0;i<5;i++){
        existe='n';
        for(int j=0;j<5;j++){
            if(x[i]==y[j]){
                existe='s';
            }
        }
        if(existe=='s'){
            printf("%d\t",x[i]);
        }
    }
    
    printf("\ntodos os elementos de x, e todos os elementos de y que nao estao em x\n");
    for(int i=0;i<5;i++){
        printf("%d\t",x[i]);
    }
    for(int i=0;i<5;i++){
        existe='n';
        for(int j=0;j<5;j++){
            if(y[i]==x[j]){
                existe='s';
            }
        }
        if(existe=='n'){
            printf("%d\t",y[i]);
        }
    }
    
    
    return 0;
}








//// ORDENA ANTES DE INSERIR NO VETOR
#include <stdio.h>

int main()
{
    int qtd,aux,num;
    scanf("%d",&qtd);
    int vet[qtd];
    
    for(int i=0;i<qtd;i++){
        scanf("%d",&num);
        if(i==0){
            vet[i]=num;
        }
        else{
            for(int j=0;j<i;j++){
                if(num < vet[j]){
                    aux=vet[j];
                    vet[j]=num;
                    vet[i]=aux;
                    num=aux;
                }
                else{
                    vet[i]=num;
                }
            }
        }
    }
    
    for(int i=0;i<qtd;i++){
        printf("%d\t",vet[i]);
    }

    return 0;
}






/******************************************************************************

  3 5 6 5 7 1 2 7 5
+ 5 2 6 4 9 7 2 6 7
-------------------
0 8 3 3 0 6 8 5 4 2

*******************************************************************************/

#include <stdio.h>

int main()
{
    int n;
    
    scanf("%d",&n);
    
    int v1[n],v2[n],resultado[n+1],vaium=0,soma=0;
    
    for(int i=0;i<n;i++){
        printf("v1[%d]: ",i);
        scanf("%d",&v1[i]);
    }
    
    printf("\n");
    
    for(int i=0;i<n;i++){
        printf("v2[%d]: ",i);
        scanf("%d",&v2[i]);
    }
    
    resultado[0]=0;
    
    for(int i=n-1;i>=0;i--){
        soma=v1[i]+v2[i]+vaium;
        
        if(soma>=10){
            if(i==0){
                resultado[i+1]=soma-10;
                resultado[i]=1;
            }
            else{
                resultado[i+1]=(soma-10);
            }
            vaium=1;
        }
        else{
            resultado[i+1]=soma;
            vaium=0;
        }
    }
    
    for(int i=0;i<n;i++){
        printf("\t%d",v1[i]);
    }
    printf("\n");
    for(int i=0;i<n;i++){
        printf("\t%d",v2[i]);
    }
    printf("\n");
    for(int i=0;i<=n;i++){
        printf("%d\t",resultado[i]);
    }
    
    return 0;
}




/*
vet[0]=5
vet[1]=4
vetB[0]=1+2+3+4+5=15
vetB[1]=1+2+3+4=10
*/

#include <stdio.h>

void function();

int main(){
    function();
    return 0;
}

void function(){
    int qtd;
    scanf("%d",&qtd);
    int vetA[qtd],vetB[qtd],soma;

    for(int i=0;i<qtd;i++){
        scanf("%d",&vetA[i]);
    }

    for(int i=0;i<qtd;i++){
        printf("vetA[%d]=%d\n",i,vetA[i]);
    }

    for(int i=0;i<qtd;i++){
        soma=0;
        for(int j=vetA[i];j>=1;j--){
            soma+=j;
        }
        vetB[i]=soma;
        printf("\nvetB[%d]=%d",i,vetB[i]);
    }
}



/*
ordenacao por insercao
*/

#include <stdio.h>

int main(){
    int n,aux;
    scanf("%d",&n);
    int vet[n];

    for(int i=0;i<n;i++){
        scanf("%d",&vet[i]);
        for(int j=0;j<i;j++){
            if(vet[i]<vet[j]){
                aux=vet[i];
                vet[i]=vet[j];
                vet[j]=aux;
            }
        }
    }

    for(int i=0;i<n;i++){
        printf("%d\t",vet[i]);
    }
    return 0;
}



/*
trocar primeiro com ultimo, segundo com antepenultimo...
*/

#include <stdio.h>

int main(){
    int n;
    scanf("%d",&n);
    int vet[n];
    int a=0, b=n-1, aux, trocas=n/2;

    for(int i=0;i<n;i++){
        scanf("%d",&vet[i]);
    }

    for(int i=0;i<trocas;i++){
        aux=vet[a];
        vet[a]=vet[b];
        vet[b]=aux;
        a++;
        b--;
    }

    for(int i=0;i<n;i++){
        printf("%d\t",vet[i]);
    }

    return 0;
}



/*
trocar primeiro com segundo, terceiro com quarto...
*/

#include <stdio.h>

int main(){
    int n,aux,passo=0;
    scanf("%d",&n);
    int vet[n], trocas=n/2;

    for(int i=0;i<n;i++){
        scanf("%d",&vet[i]);
    }

    for(int i=0;i<trocas;i++){
        aux=vet[passo];
        vet[passo]=vet[passo+1];
        vet[passo+1]=aux;
        passo+=2;
    }

    for(int i=0;i<n;i++){
        printf("%d\t",vet[i]);
    }

    return 0;
}



/*
trocar primeiro com terceiro, segundo com quarto...
*/

#include <stdio.h>

int main(){
    int n,aux,passo=0,a=0;
    scanf("%d",&n);
    int vet[n];

    for(int i=0;i<n;i++){
        scanf("%d",&vet[i]);
    }

    for(int i=0;i<n;i++){
        if(passo==2){
            passo=0;
            a+=2;
        }
        if(a+2>=n-1){
            break;
        }
        aux=vet[a];
        vet[a]=vet[a+2];
        vet[a+2]=aux;
        passo++;
        a++;
    }

    for(int i=0;i<n;i++){
        printf("%d\t",vet[i]);
    }

    return 0;
}



/*
escrever valores repetidos
*/

#include <stdio.h>

int main(){
    int n;
    scanf("%d",&n);
    int vet[n];

    for(int i=0;i<n;i++){
        scanf("%d",&vet[i]);
    }

    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(vet[i]==vet[j]){
                printf("%d\t",vet[i]);
            }
        }
    }

    return 0;
}



/*
escrever valores nao repetidos
*/

#include <stdio.h>

int main(){
    char repete;
    int n;
    scanf("%d",&n);
    int vet[n];

    for(int i=0;i<n;i++){
        scanf("%d",&vet[i]);
    }

    for(int i=0;i<n;i++){
        repete='n';
        if(i>0){
            for(int j=i-1;j>=0;j--){
                if(vet[i]==vet[j]){
                    repete='s';
                }
            }
        }
        if(repete=='n'){
            printf("%d\t",vet[i]);
        }
    }

    return 0;
}




/* triangulo de pascal */

#include <stdio.h>
#include <string.h>

void imp(int vet[50],int lim){
	for(int i=0;i<=lim;i++){
		printf("%d ",vet[i]);
	}
	printf("\n");
}

int main(){
	int v[50],n=15,p=1;
	v[0]=1;

	for(int i=0;i<n;i++){
		if(i==0){
			imp(v,i);
		}
		else if(i==1){
			v[1]=1;
			imp(v,i);
		}
		else if(i==2){
			v[1]=2;
			v[i]=1;
			imp(v,i);
		}
		/*else if(i==3){
			v[i]=1;
			v[i-1]=3;
			v[i-2]=3;
			imp(v,i);
		}*/
		else{
			int v_aux[i];
			int ind=1;

			for(int u=0;u<i;u++){
                v_aux[u]=v[ind];
                ind++;
			}
			v[1]=i;
			v[i]=1;
			v[i-1]=i;

			for(int j=2;j<=i-2;j++){
				v[j]=v_aux[j-1]+v_aux[j-2];
			}
			imp(v,i);
		}
	}

	return 0;
}

